进程的创建流程
１、用户空间通过运行程序或者调用接口发起创建进程
２、操作系统功能接受用户请求，开始创建进程
３、操作系统功能分配计算机资源，确定进程状态，开辟进程空间等工作
４、操作系统将创建好的进程提供给应用程序使用


cpu时间片
如果一个进程占有计算机核心，我们称为该进程占有计算机cpu时间片。

* 多个任务之间是争夺cpu的关系
* 谁占有cpu最终由操作系统决定


PCB(进程控制块)
在内存中开辟的一块空间，用来记录进程的信息

* PCB是操作系统功能查找识别进程的标志

查看进程信息的命令 ： ps - aux

PID(process ID): 进程ID，由操作系统功能自动分配，是个正整数

父子进程：在系统中除了初始化进程，每个进程都有父进程，可能有0个或者多个子进程。由此形成父子进程关系。


查看进程树： pstree
查看父进程PID ：ps -ajx

查看进程优先级：top
    动态查看系统中的进程信息，用 < > 翻页
    取值范围  -20 到 19 ,  -20 级别最高


使用指定的优先级运行程序
    nice ： 指定运行的优先级

    e.g.  nice -9 ./while.py  以优先级9运行
          nice --9 ./while.py 以优先级-9运行（通常需要root权限）

进程特征

1、进程间互不影响，独立运行
2、进程是操作系统资源分配的最小单位
3、每个进程空间独立，各自占有一定的虚拟内存




多进程编程

import os

pid = os.fork()
功能： 创建新的进程
参数： 无
返回值：  失败：返回一个负数
        成功： 1、在原有的进程中返回新的进程的PID
              2、在新的进程中返回0

进程相关函数

获取进程PID
os.getpid()

获取父进程PID
os.getppid()


进程退出

os._exit(status)
功能： 进程退出
参数： 进程的退出状态

sys.exit([status])
功能： 进程退出
参数： 数字表示退出状态，不写默认为0
      字符串，表示退出时打印的内容

* sys.exit 可以通过捕获 SystemExit异常防止退出


孤儿进程：父进程先于子进程退出，此时子进程就称为孤儿进程

* 孤儿进程会被操作系统指定的进程收养，系统系统进程就成为孤儿进程的新的父进程


僵尸进程：子进程先于父进程退出，但是父进程没有处理子进程的退出状态，此时父进程就会成为僵尸进程

* 僵尸进程会存留少量PCB信息在内存中，大量的僵尸进程会消耗系统资源，应当避免僵尸进程的产生


如何避免僵尸进程产生
    * 处理子进程退出状态
        pid, status = os.wait()
        功能： 在父进程中阻塞等待处理子进程退出
        返回值： pid    退出的子进程的PID号
                status  获取子进程的退出状态
        pid, status = os.w
        waitpid(pid, option)
        功能： 在父进程中阻塞等待处理子进程退出
        参数： pid -1  表示等待任意子进程退出
                   >0 表示等待对应PID号的子进程退出
             option  0      表示阻塞等待
                    os.WNOHANG 表示非阻塞
        返回值： pid    退出的子进程的PID号
                status  获取子进程的退出状态
    * 让父进程先退出
        1、父进程创建子进程等待子进程退出
        2、父进程创建二级子进程后立即退出
        3、二级子进程称为孤儿，和原来的父进程各自执行事件



Multiprocessing 模块创建进程

1、需要将要执行的事情封装成函数
2、使用multiprocessing模块中的Process类创建进程对象
3、通过对象属性设置和Process的初始胡函数对进程进行设置，绑定要执行的函数
4、启动进程，会自动执行进程绑定的函数
5、完成进程的回收

Process()
功能： 创建进程对象
参数： name   进程名称 Process-1
      target 绑定函数
      args   元组   给target函数按照位置传参
      kwargs 字典  给target函数按照键值对传参

P.start()
功能： 启动进程
*  target 函数会自动执行，此时进程真正被创建


p.join([timeout])
功能： 阻塞等待回收子进程
参数： 超时时间

*   使用multiprocessing创建子进程，同样子进程复制父进程的全部代码段，
  父子进程各自执行互不影响，父子进程有各自的运行空间

*   如果不使用join回收子进程则子进程退出后会成为僵尸进程

*   使用multiprocessing创建子进程往往父进程只是用来创建进程、回收进程


Process进程对象属性

p.start()
p.join()

p.is_alive()  判断进程生命周期状态，处于生命周期得到True ，否则返回False

p.name 进程名称  默认为Process-1

p.pid  进程的pid

p.daemon
默认状态False  主进程退出不会影响子进程执行
如果设置为True  则子进程会随着主进程的结束而结束

* 要在 start 前设置

* 一般不和join一起使用 

注意：p.daemon 并非守护进程

********************************************
注意：
1、如果子进程从父进程拷贝对象，且对象和网络或者文件相关联，那么父子进程会使用同一套对象属性，相互有一定的关联性
2、如果在子进程中单独创建对象，则和父进程完全没有关联





多进程
优点：  可以使用计算机多核，进行任务的并发执行，提高执行效率
       空间独立，数据安全
       运行不受其他进程影响，创建方便

缺点：  进程的创建和删除消耗的系统资源较多


进程池技术
产生原因： 如果有大量任务需要多进程完成，则可能需要频繁的创建删除进程，给计算机带来较多的资源消耗



