多线程 1

基本概念
#1.程序(program)
静态的概念
我们写好的软件，存放在磁盘上文件可以叫程序
包括:需要执行的命令和数据(0/1)
程序是磁盘上存在的静态实体
#2.进程(process)
程序在一个数据集上运行的过程
程序大多数的时候被存储为可执行
进程是有生命周期的
程序可以同时形成多个运行副本，一个进程可以执行多个程序

#3.程序和进程的关系 (不确定)
一对一:
一对多:
多对一:
多对多:
以上都不是:
#4.类比一些多进程中的概念:
os (Operating system)操作系统:公司
CPU(中央处理器),I/O(输入 输出):公司某些资源,
单核cpu 
进程:公司的部门
线程:公司的人,干活的实体
锁:厕所里边有把锁:餐厅内 健身房

进程的主要特征
动态性
独立性  想想各部门的类比
并发性
结构性  
进程的结构:
   进程包含:
          数据段
          代码段
          PCB(Process Control Block)
            1.pid pname
            2.进程的调度信息(进程状态信息,优先级)
            3.进程的资源(cpu,内存，磁盘)
            4.等等

进程的状态信息:
就绪，执行，等待/阻塞
进程调度
操作系统会合理的为系统中进程分配资源，供其运行
时间片轮转调度
基于优先级的抢占式调度
状态信息
新建 就绪 执行 等待/阻塞 终止

优先级:
   在操作系统中用数字表示
在Ubuntu中，优先级-20--19,数值越小优先级越高
在Windows中,在0到31之间，数值越大优先级越高

查看信息的方法:
Windows 下资源管理器
Linux 
ps aux进程快照
top 类似于资源管理器(动态):q退出

多任务系统 多个事情需要执行:
多用户
并发 单核时分时占用CPU资源
并行 多核是真正的多个进程并行执行 

1.1+1/2+1/4+...+1/2**n
#def cal(n):
#     result=0
#     for i in range(n+1):
#         result += 1/(2**i)
#     return result
# # n=int(input("请输入n:"))
# for i in range(10,100):
#     print(cal(i))
互斥与同步
资源竞争

阻塞与非阻塞
阻塞
资源被占用，死等
非阻塞
资源被占,不用等，做其它事情

#几类进程:
销售部门:
   总部 1部 2部
父子关系
兄弟关系
1)孤儿进程:父进程挂了，子进程还在
2)僵尸进程:子进程挂了，父进程还在，没有给子进程善后
3)!!!TODO!!!守护进程:
在后台运行的程序，跟着父进程一起消失的进程，这种进程可以随时死亡
如果我们的子进程处于要处于某些状态，操作I/O,建议不要设置成daemon进程，
因为它可能随时死亡

**不要用terminate


父子进程
父进程可以创建多个子进程，每个子进程只能有一个父进程
如果父进程先于子进程终止，子进程变为孤儿进程
僵尸进程
没有回收子进程的退出状态，子进程成为僵尸进程
僵尸进程虽然不再活动，但其终止状态仍然能保留，也会占用系统资源，
直到被其父进程回收才得以释放
一个进程成为僵尸进程需要引起注意，如果它的父进程长期运行而不终止，
僵尸进程所占用资源长期得不到释放

multiprocessing包  multi(多)
python跨平台的多进程管理包，实现本地和远程并发
支持Windows,Linux/Unix平台
允许程序员充分利用给定机器上的多个处理器
主要包括
-process类
    Process(target=函数名,args=(参数元组))
    start() 就绪
    #terminate慎用
    daemon    守护进程可以在后台做一些辅助的事
    ×××主进程对子进程join的话，
       子进程的daemon就会失效
       daemon设置在start之后是无效的
       默认情况下multiprocessing中主进程会等待子进程，显示等待某个进程可以用
    join() 显示的等待行为，明确此刻需要等待


#sudo pip install multiprocessing 安装这个包
作业:multiprocessingtimer.py
1)实现一个定时器，每隔半个小时提醒你休息一下眼睛，
面向对象的形式来实现
实现自己的process类，重写run方法