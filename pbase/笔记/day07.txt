2017年１２月12日　　星期二　　第７天
列表推导式（list comprehension)
作用：
用简易方法生成列表
语法;
[表达式　for 变量　in 可迭代对象]
或
[表达式　for 变量　in 可迭代对象　if 真值表达式]
１．先用可迭代对象生成一个对象，同时用变量绑定这个对象
２．调用表达式，把当前的表达式结果以追加方式存放在列表中
３．重复步骤１，直到可迭代对象不在提供对象为止
４．for in 表达式的if子句可以省略，省略后将对所有对象进行处理
５．如果if真值表达式的布尔值为False，则可迭代对象生成的数据将被丢弃
示例：
l=[x for x in range(100) if x%2==1]  #l=[1,3....99]

列表推导式的嵌套
语法
[表达式　
　　　　　　　for 变量１　in 可迭代对象１　if 真值表达式１
　　　　　　　　　　　　　　for 变量２　in 可迭代对象２　if 真值表达式２

　　　　　　　　　　　　　　　　　　　　　....
]
示例：
s='ABC'
s2="123"
[A1,A2,A3.......C3]
l=[x+y for x in s for y in s2]

练习：列表推导式生成如下
１．[1,4,7,10....100]
2.[[1,2,3],[4,5,6],[7,8,9]]

元组（tuple)
  元组是不可改变的序列，同list一样，元组可以存放任意类型的值

  表示方法：
用小括号（）括起来，单个元素括起来后加逗号（，）来区分表达式分组还是元组

创建空元组
　　t=()　　＃t绑定空元组
创建非空元组：
　　t=200,
  t=(20,)
  t=(1,2,3)
  t=100,200,300

元组的构造函数：
tuple()　　　　　　　　生成一个空元组，等同于（）
tuple(iterable)　用可迭代对象生成一个元组
示例：
t=tuple()           #空元组
t=tuple('ABC')　　　　　　t=('A','B',"C")
t=tuple([1,2,3,4])  #t=(1,2,3,4)
元组的算数运算
+ +=  * *= 

元组比较运算等同于字符串和列表的比较规则
　
in/not in运算符：
等同于字符串和列表的运算规则

索引　index
  用法等同于字符串的索引
  元组不能索引赋值

切片（slice)
用法等同于字符串的切片
＃　元组的切片返回一个新的元组

元组的方法：
index(...)
    T.index(value, [start, [stop]])　　返回对应元素下标，当value不存在时，触发
 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　valueError的错误
count(...)
    T.count(value)　　　　　　　　　　　　　　　　　　　返回元素个数

能用于序列的函数总结：
len(x)
max(x)
min(x)
sum(x)
any(x)
all(x)
str(obj)        将对象obj转化字符串
list(iterable)
tuple(iterable)

思考：
元组

字典　dirct
什么是字典：
　　字典是一种可变的容器，可以存储任意类型的数据，
　　字典中的每一个数据都是用“键”（key)进行索引的，而不是像数列，可以用整数下标进行索引
　　字典的数据没有先后关系，字典的存储是无序的
　　字典的数据以键-值(key-value)对　的形式进行存储的
　　字典的键不能重复，且只能用不可变类型作为字典的键
字典的字面值表示方法：
　　以大括号，花括号｛｝括起来，以冒号（：）分隔键-值对，各键值对之间用逗号分隔开

创建空字典：
　　d={}    #d 绑定空字典
创建非空字典：
　　d={"name":'wemingzhe','age':35}
  d={(2008,8,8):'北京奥运会'}

  字典的值可以为任意类型：
  　bool,str,int,float,complx,tuple,list,dict  集合　，函数　类对象

  dict() 的构造函数：
  dict()         生成一个空字典，等同于｛｝
  dict(iterable)　用可迭代对象初始化一个字典
  dict(**kwargs)  关键字参数形式生成一个字典

  示例：
  d=dict(name="weimingze",age="35")
   #d={"name":'wemingzhe','age':35}
   dict('ab',[1,2],(3,4))  #{'a':b,1:2,3:4} 

可变类型(不能充当字典的键)：列表，字典，集合set，字节数组（bytearray,)
字典的键索引
　　　用[]访问字典的成员
语法：
　　字典[键]
示例：
d={"name":'wemingzhe','age':35}
print('姓名：',d['name'])

字典的特点：
　　添加，删除，查找速度快
添加和修改元素
　　字典[键]＝值
示例：
d={}
d['name']='tarena'  #创建新的键值对
a['age']=20         #创建新的键值对
d['age']=21         #修改age键所对应的值
说明：
　　字典的键索引赋值时：
　　　　　１.键不存在，创建键，并绑定对应的值
　　　　　２．键存在，修改绑定的值
del 语句
　　可以用来删除字典的键-值对
　　d={"name":'wemingzhe','age':35}
　　del d['age']
in /not in 运算符
　　1.可以用in运算符来判断一个键是否存在于字典中，如果存在则返回True，否则返回False
  2.inot in 与in 相反
  示例：
  d={"name":'wemingzhe','age':35}
  'name' in d  #返回True

  字典的迭代访问：
  　　字典是可迭代对象，字典只能对键进行迭代
  　示例：
  d={"name":'wemingzhe','age':35}
  for x in d:
      print(x)
字典的内建函数：
len(x)     返回键值对的个数
max(x)
min(x)
sum(x)
any(x)   真值测试，只对键测试
all(x)
练习：
输入一段字符串，打印字符串出现过的字符串及出现过的次数，不要求顺序，如
输入:abcab
s=input('请输入一串字符：')
d={}
for x in s:
    if x not in d:
        d[x]=1
    else:
        d[x]+=1
print(d)
for x in d:
    print(x,':',d[x],'次')

字典的方法（method)
D代表字典对象
D.clear        　　　　清空字典
D.pop(key)　　　　　　　　　移除键，同时返回此键所对应的引用关系
D.copy　　　　　　　　　　　　　返回字典D的副本，只复制一层（浅拷贝）　　　　
D.update(D2)　　　　　　　　将字典D2合并在D中，如果键相同，则此键的值取D2的值作为新值　　　　
D.get(key,default)　　　返回　　
D.keys()　　　　　　　　　　　　　　　　
D.values()　　　　　　　　　　　　　　　
D.items()

字典推导式　dict comperhesion
作用：用可迭代对象生成一个新的字典
语法：
　　｛键表达式：值表达式
　　　　　　　　　for 变量列表　in 可迭代对象[if 真值表达式】｝
示例：
生成一个字典，键为数值(1~10),值为数字的平方
　　d={x:x**2 for x in range(1,11)}　　

字典推导式嵌套
　　　　嵌套方式与列表推导式相同　　　　

练习：
１．先输入一些单词和解释，将单词作为键，将解释作为值，将这些数据输入字典中，以输入单词用空结束输入，然后循环提示请输入要查找的词，如果不存在于字典中提示没找到，如果存在，打印解释

２．输入任意５个学生的姓名，年龄，成绩，学生信息，存入字典，然后把学生的信息字典放入列表中，每个学生的信息需要手动输入，内部存储格式如下：
[{'name':'tarena','age',:20,'score':99},{'name':'xiaowang','age',:21,'score':59　　　　},....]
)1.打印所有学生信息如下：
+-------------+-------------+--------------+
|  姓名　　　　　　　　|  年龄　　　　　　　　|  成绩　　　　　　　　|
+--------------+-------------+--------------+
|    张         |　　　　　　　　　　　　　|              |
|               |             |              |
+---------------+-------------+--------------+

)2.输入学生的分数线，把高于这个分数的学生信息打印出来，如输入：９０打印如下
+-------------+-------------+--------------+
|  姓名　　　　　　　　|  年龄　　　　　　　　|  成绩　　　　　　　　|
+--------------+-------------+--------------+
|    张         |　　　　　　　　　　　　　|              |
|               |             |              |
+---------------+-------------+--------------+