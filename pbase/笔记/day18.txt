2017年１２月２７日　　星期三　　第１８天
函数重写（override/overwrite)和运算符重载（overload)
函数重写：
作用：让自定义的实例像内建对象一样进行函数操作
对象转字符串函数重写：
repr(obj)  返回一个能代表此函数对象的表达式字符串，通常：
　　　eval(repr(obj))==obj
str(obj)  通过给定的对象返回一个字符串（这个字符串通常是
给人来阅读的）

对象转字符串函数的重写方法：
repr() 函数的重写方法：
　　　　def __repr__(self):
str()  函数的重写方法：
　　　　def __str__(self):
    如果没有__str__(self)方法，则返回repr(obj)
    函数结果代替

内建函数重写：
def __abs__(self): 方法　abs(obj)函数调用
def __len__(self): 方法　len(obj)函数调用
def __reversed__(self): 方法　reversed(obj)函数调用
def __round__(self): 方法　round(obj)函数调用
　
exercise 
数值转换函数的重写
complex(obj)   ====> __complex__ 方法
int(obj)       ====> __int__ 方法
float(obj)     ====> __float__ 方法
bool(obj)      ====> __bool__ 方法

布尔测试预算符：
 格式：
 def __bool__(self):
    ....
作用：
１．用于bool(obj)函数取值
２．用于if语句的真值表达式中
３．用于while语句的真值表达式中
说明：
当没有__bool__(self)方法时，真值测试值以__len__(self)
方法

对象属性管理函数：
1.getattr(obj,name[,default])
从一个对象得到对象的属性，gettattr(x,'y') 等同于x,y，当属性
不存时，如果给出default参数，则返回default,否则会产生一个
AttributeError错误
２．hasattr(obj,name) 用给定的name,返回对象obj是否有此属性
，此种做法可以避免在getattr(obj,name)时引发错误
３．setattr(obj,name,value)
给对象obj的名为name 的属性设置相应的值value,set(x,'y',v)
等同于x.y=v
4.delattr(obj,name)
删除对象obj中的name属性，delattr(x,'y')等同于del x.y

attribute （属性）

del 语句终结：
１．删除变量
２．删除列表中的元素
３．删除字典中的键值对
４．删除对象的实例变量（也叫属性）

属性管理的重写
__getattr__(self,n)     ==>x,y
__setattr__(self,n,v)   ==>x.y=v
__delattr__(self,n)     ==>del x.y

属性管理的作用：
　　实现的特殊属性的管理，模拟一些特殊属性
注：
　以上方法，当属性不存在时，需要触发一个AttributeError的错误
说明：
__getattr__是在找不到对象应用属性时才调用，当没有属性时，
需要产生一个AttributeError错误

练习：定义一个圆类：
class Circel:
    def __init__(self,r:'半径')
)1.实现虚拟出一个属性area得到圆的面积
　　c1= Circle(10)
  print(c1.area)
  )２．实现设置面积，半径随着变动
  c1.area=314.15926
  print(c1.r)
 
练习：
实现２０４８游戏的移动算法
游戏：www.//2048game.com  

def left_a_line():
l=[2,0,0,2]
left_a_line(l)  #l=[4,0,0,0]
l=[8,8,2,2]
left_a_line(l)  #l=[16,4,0,0] 
地图表可以定义如下：
map=[
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0]]
    