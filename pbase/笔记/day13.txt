2017年１２月２０日　　星期三　　第１３天
　随机模块　random
import random as R
作用：
　　用于模拟或生成随机输出的模块
函数：
R.random() 返回一个[0~1)之间的随机数
R.uniform(a,b)   返回一个[a,b)的随机数-   
R.randrange([start,]stop[,step])  返回
　　　　　　　range(start,stop,step)中的随机数
R.choice(seq) 从序列中返回随机元组
R.shuffle(seq) 随机指定序列的顺序（乱序序列） 
R.sample(seq,n)　从序列中选择n个随机且不重复的元素

系统模块　sys:
　　此模块可以获取或设置系统相关的数据
变量：
sys.path 模块的搜索路径
sys.version  版本信息的字符串
sys.version_info  版本信息命名元组
sys.platform 操作系统平台名称信息
sys.builtin_module_names  Python内建模块的名称
sys.modules  已加载模块字典
sys.argv  命名参数，　argv[0]  代表当前脚本程序路径

在python的主模块第一行加入：
#!/usr/bin/python3
告诉调用此程序省，以下程序用/usr/bin/python3这个文件来解释执行
示例：
见:mygame
编写mygame
添加执行权限：
$ chmod +x mygame   (r,w,x)r是读权限，w是写 x执行
$ sudo cp mygame /usr/bin/
$ ./mygame

练习：
自己写一个python程序，放在/usr/bin下，让此程序可以在任意终端路径下
直接调用

sys.exit()  退出程序
sys.getrecursionlimit() 得到递归的最大层数
sys.setrecursionlimit() 设置递归的最大层数

自定义模块：
　　用户自己编写模块
示例：
自定义模块和导入模块的主模块必须在同一文件
模块的加载过程：
　　模块在第一次被加载时，所有语句都被执行，以后再将加载时，
将不会再次执行模块内的语句

模块的路径搜索顺序：
import 
1.搜索程序运行时的路径（当前路径）
２．sys.path 提供的路径 
     sys.path.append(路径)
３．搜索内置模块
模块化的编程的优点：
１．有利于多人合作开发
２．提高代码复用率
３．代码更容易维护
４．模块化编程有助于解决函数名和变量名冲突（模块内
　　　变量作用域为模块内全局变量）

PYTHONPATH环境变量
　　　PYTHONPATH环境变量里的路径会在python3解析器启动时自动加载到
　　　sys.path列表中
添加Linux/Unix环境变量：
$ export PYTHONPATH=/home/tarena/aid1711

查看Linux/Unix环境变量:
$ printenv
模块的文档字符串：
　　模块中，第一个没有没有赋值给任何变量的字符串是模块的文档字符串，
　　在交互模式下，可以用help（模块名）查看
模块的属性：
__name__属性
作用：
１．用来记录模块名自身的名字
２．用来判断是否为主模块
说明：对于被导入的模块，模块名去掉“路径前缀”和“.py”后缀的文件名
　　对于被执行的主模块，模块名为"__main__"
__doc__属性：
　　　用来记录文档字符串
__file__属性
用来记录模块的所在路径

模块中的__all__列表
　　__all__是一个用来存入可导出属性的列表
作用：
　　当用　from xxx import * 导入时，

__all__=['f1','f2']   只导f1, f2
def f1(): 
    pass
def f2():
    pass
def f3():
    pass
模块的隐藏属性：
模块中以下划线'_'开头，不以双下滑线结尾的变量，在
from xxx import * 导入时，将不被导入

模块的加载过程：
１．先搜索相关路径找模块（xxx.py）
２．判断是否有此模块对应的.pyc文件，如果.pyc文件与.py文件”新“则
　　直接加载.pyc文件
３．否则用模块.py文件生成.pyc

包　package (模块包)
　　包是将模块以文件夹的形式组织　在一起，进行分组管理的办法
包的作用：
　　将一系列模块进行分类管理，有利于防止命名冲突
　　要以在需要时加载一个或部分模块而不是全部模块

tree 命令安装
$ sudo apt install tree
$ tree

包的导入语句：
同模块的导入规则
import 语句
　　语法：
　　　　　　import 包名　[as 包别名]
．　　　　import 包名.模块名　[as 模块新名]
　　　　　　import 包名.子包名.模块名　[as 包别名]
from import 语句
语法：
from 包名　import 模块名　[as　模块新名]
from 包名.子包名　import 模块名　[as　模块新名]
from 包名.子包名.模块名　import 属性名　[as　模块新名]

from import　* 语句
from　包名.模块名 import　*
  
__init__.py
作用：
１．在内部填写文档字符串
２．在__init__.py内可以加载此包所依赖的一些模块
__init__.py 内的__all__列表
作用：
　　用来记录此包中有哪些子包或模块需要在from xxx import *
时被导入
说明：
　　此列表只有在　from import *有效

包的相对导入
　　　包的相对导入是指包内模块的相互导入
在from xxx import 语句中可以使用相对导入
在from 和import可以用相对路径
.代表当前目录
..代表上一级目录
...代表上二级
注意，相对导入时不能超出包的外部，只能用from语句　

包的加载路径：
    同模块的加载路径
    sys.path 添加包的搜索路径
    PYTHONPATH

练习：
１．猜数字游戏，生成一个随机整数，整数在０～１００数，保存在变量x内，
　让用户循环输入一个整数，用变量y绑定，如果y==x，则提示”恭喜你猜对了“
如果y大于x，则提示你输入大了，否则提示你猜小了，直到猜对，显示猜的次数退出程序
２．模拟斗地主发牌，共５４张，
黑桃('\u2660'),梅花('\2663u'),方块('\u2665'),红桃('\u2666')
A2....JQK  大小王

